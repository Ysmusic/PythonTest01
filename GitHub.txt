================================================================================
★ git
================================================================================

- git バージョン確認 : $ git --version

- git によるバージョン管理の流れ

  - 履歴データベースに保存

    1. 作業ディレクトリ
         ファイルを作ったり修正したり。

    2. ステージングエリア ( インデックス )
         途中での作業経過を保存しておくことができる。
         経由地のようなもの ( 作業ディレクトリ --経由--> リポジトリ )

    3. リポジトリ ( ローカル / リモート ) .... 履歴用データベースのこと。
         作ったファイルをここに保存する。( 意味のあるまとまりを綺麗に保存しておくことができる )
         尚、リモート リポジトリは、Web上やネットワーク上に置き、ソースコードを共有したりする。

  - got の必須設定
      - git は、データを保存する時に、必ず保存した人の "名前" と "email" を記載することになっている。
          $ git config --global user.name "Yasuhiro Sugino"
          $ git config --global user.email "sugino-yasuhiro@shinwa-cont.com"
  - 便利な設定としては、
      - メッセージの色分け
          $ git config --global color.ui true
  - 設定の一覧
      - [例] 上記の設定の一覧
          $ git config -l
            user.email=sugino-yasuhiro@shinwa-cont.com
            user.name= Yasuhiro Sugino
            color.ui=true
  - Help
          $ git config --help または $ git help config
          $ q で 脱出

  - 手順 ... 上記 1 ～ 3 を実行してみる。

    - 手順1. $ mkdir testweb      .... 作業用ディレクトリを作成する。
             $ cd testweb         .... 作成したディレクトリに移動する。
    - 手順2. $ git init           .... 現在いるディレクトリで git を使うための 使用宣言をする。
    - 手順3. $ vim ファイル名     .... vimエディタでファイルを作成する。
               :wq                .... ファイルを保存して終了する。
             $ cat ファイル名     .... 作成したファイルの中身を表示する。
    - 手順4. $ git add ファイル名 .... ステージングエリアに作成したファイルを上げる。
    - 手順5. $ git commit         .... ステージングエリアにある作成したファイルを、リポジトリに上げる (コミットする)
               commit画面の最上部に、作成したファイルの要点をメッセージとして書く。( 変更/追加/修正 の要点などを )
    - 手順6. $ git log            .... リポジトリの履歴を見る。

  - git log の オプション ( コンパクトに見たい時に便利 )

      $ git log --oneline .... git ID と 変更したメッセージのみ を１行で見る ( 簡潔表示 )
      $ git log -p        .... 変更された箇所を見る。( どこがどう変更されたかを見る )
      $ git log --stat    .... どのファイルが何か所変更されたかを見る。

  - git の便利なコマンド

      $ git checkout -- ファイル名 .... 変更前のファイルに戻す。
      $ git diff                   .... 変更した箇所 ( 差分 ) を表示する .... 但し、まだステージングエリアに上げていない場合。
      $ git diff --cached          .... 変更した箇所 ( 差分 ) を表示する .... 但し、まだコミットしていない場合。
      $ git add .                  .... 複数のファイルをステージングエリアに上げる。
      $ git status                 .... 作業後、まだステージングエリア や リポジトリに上がってない等、ファイルの状況を確認する。

  - 既に git管理下 にあるファイルを移動や削除する場合は、mv や rm の直前に、git を付けること。

      $ git rm ファイル名 .... git管理下にあるファイルを削除する。

  - 対象から外す .... .gitignoreファイルに記載する。

    - [例] $ git add . 複数のファイルをステージングエリアに上げる場合に、*.log は対象外とする時。
        $ vim .gitignore .... .gitignoreファイルを作成する。
          *.log          .... .gitignoreファイル内に *.log と記述すると、
                              拡張子が .log の全ファイルは gitコマンドの対象から外されるので、
                              $ git add . は、.logファイル以外の複数のファイルをステージングエリアに上げる、となる。
                              また、そのスコープは、同じディレクトリとそれ以下のサブディレクトリに効果がある。
  - コミット画面を表示させずに、コミットさせる。

      $ git commit -m "ライン2を追加"

  - 少しの変更修正なので、簡単にコミットさせる。

      $ git commit --amend
        :wq

  - 過去のバージョンに戻す。

      $ git reset --hard              .... 作業ディレクトリも ステージングエリアも 直前に戻す。
      $ git reset --hard HEAD         .... 作業ディレクトリも ステージングエリアも リポジトリも 直前に戻す。
      $ git reset --hard HEAD^        .... 作業ディレクトリも ステージングエリアも リポジトリも 二つ前に戻す。
      $ git reset --hard "commitのID" .... commit ID の 先頭から7桁以上を指定すると、そこへ戻すことができる。
      $ git reset --hard ORIG_HEAD    .... 前回取り消されたバージョンを取り戻す。

  - 平行して同時開発する。( 少し試してみたい時に利用すると便利 .... 試した後で削除したらよい )

      $ git branch      .... 開発名を一覧表示させる。
        * master        .... デフォルトの開発は、master
      $ git branch hoge .... 平行の開発を作る。[例] hoge
      $ git branch      .... 再度、開発名を一覧表示させる。
          hoge
        * master
      $ git checkout hoge .... 他の開発に移行する。[例] hoge
        * hoge
          master
      $ git checkout -b hoge .... 開発を作成し、同時に、その開発へ移行する。( 一気に )

  - 同じものを他の開発へも反映させる。( Merge : 混ぜる )

      $ git 元の開発名 先の開発名

  - 開発の削除

      $ git branch -d hoge

  - commitの番号は長いので、commitに分かり易い名前を(タグ)を付ける。

      $ git tag v1.0 .... 直近のcommitに対してタグを付ける場合。
      $ git tag      .... タグを確認する。
        v1.0
      $ git tag v1.0 "commitのID" .... 指定したcommitにタグを付ける場合。( commit ID は先頭から7桁以上を指定 )
      $ git show v1.0

  - タグの削除

      $ git tag -d v1.0

  - 短縮名

      $ git config --global alias.st status .... st <--短縮名-- status
      $ git st                              .... $ git status と同じ。

  - 共有リポジトリの操作

      Aさんのディレクトリ          : myweb ( ファイル : index.html )
      Bさんのディレクトリ          : myweb2
      共有リポジトリ用ディレクトリ : ourweb.git
      したいこと                   : index.htmlの共有 ( 上記ファイル )
      処理の流れ                   : Aさん --> 共有 --> Bさん __(変更)__ Bさん --> 共有 --> Aさん

      [ 共有リポジトリ用ディレクトリを作成 ] .... 共有リポジトリ用ディレクトリは、"*.git" という名前を付けるのが通例。

※      $ mkdir ourweb.git .... 共有リポジトリ用のディレクトリを作成する。
※      $ cd ourweb.git/   .... 作成したディレクトリの中に移動する。
※      $ git init --bare  .... 共有リポジトリを作る。( --bare を付ける )

      [ Aさん --> 共有 ] .... 前もって、Aさんのディレクトリに移動しておくこと。

※      $ git remote add origin ~/ourweb.git .... 共有リポジトリ先を登録する。
※      $ git push origin master             .... origin <-- master ( PUSH ( 押し出す ))

      [ 共有 --> Bさん ]

※※    $ git clone ~/ourweb.git/ myweb2 .... ourweb.git --クローン--> myweb2

      [ Bさん --> 共有 ] .... 前もって、Bさんのディレクトリに移動しておくこと。

        $ vim index.html         .... vimエディター で index.html を変更したものとする。
※      $ git push origin master .... origin <-- master ( PUSH ( 押し出す ))

      [ 共有 --> Aさん ] .... 前もって、Aさんのディレクトリに移動しておくこと。

※      $ git pull origin master .... origin --> master ( Pull ( 引き出す ))

      尚、その他、使用するコマンドは、
      $ git config -l                  .... remote origin の場所が分かる。
      $ cd myweb2                      .... myweb2ディレクトリに移動する。
      $ ls                             .... クローンしたファイルを確認する。
      $ git log                        .... コミットを確認する。
      ちなみに remote origin の削除は、
      $ git remote rm origin

================================================================================
★ GitHub : Home URL .... https://github.com
================================================================================

  参考URL : http://www.backlog.jp/git-guide/

  GUIツール : SourceTree ( Git も一緒ににインストールされる )
                 ダウンロード : https://www.sourcetreeapp.com

【  GitHub の説明  】

    場所や時間にとらわれず、協力して作り上げていくというスタイルで、新しいものづくりが可能。
    GitHub は、それらの内容が集まる 「世界的な開発の中心地」で、現在、７００万人の開発者が利用している。

    GitHub では、ファイルや修正履歴を確認したり、リポジトリやブランチを作る作業をブラウザから行なうことができる。
    GitHub は、VCS(バージョン管理システム)なので、ソースプログラムだけでなく、出版の分野でも利用されている。
    前の状態に戻したり、今の状態と比較したりでき、履歴を残しておけば、修正を元に戻すことができる。

    jQuery や Node.js などのオープンソースのコードを使うことができる。

【  リポジトリ  】.... ファイルやディレクトリを置いておく場所。( 元々は、構成の意味 )
                    ソースコードを管理するプロジェクトの単位。

    ファイルやフォルダをネット上に置いておくことによって、いつでも、どこからでも、取得/変更できる。( DropBox のソース保存版用 )
    ファイルは、１プロジェクト毎に、「リポジトリ」という単位でまとめられる。
    リポジトリ内のファイルは、自分だけ変更できるようにしたり、チームで権限管理のもとに変更できるようにすることが可能。

【  コミット  】.... コミットとは、修正を "ひとかたまり" にして保存すること。

    Commit# / 修正人 / 修正日時 / 修正内容 / コメント。
    "誰が" "いつ" "どのような" 変更を行なったかの履歴をひとまとめにしたものが、コミットである。

【  diff  】.... "修正の差分" の機能。

    削除 : -赤文字列
    追加 : +緑文字列

【  マージ  】.... 複数のコミットをまとめる。

    例えば、二人が、同時に同じファイルを修正した場合、どちらの修正も取りこぼさず反映される。
    ？？？ 同じ箇所を修正した場合は、具体的に、どうかるのか？？？

【  fork  】.... サーバー内にある他人のリポジトリを、サーバー内にある自分のリポジトリにコピーすること。

【  clone  】.... サーバーにあるリポジトリ内のファイルを、自分のパソコン上にコピーしてくること。

    自分のパソコンに、ファイルを落としてきて、作業できるようにすること。

【  push  】.... clone の逆。

【  Issue / Milestone  】.... 地理的に離れたところから、相談して課題を解決できる機能。( オンライン )

    Issue を使って、課題をディスカッションする。( 掲示板の発展形 )
        Issue     .... 課題内容を記載しておく。( Issue番号で管理される )
        Milestone .... 期限 / bug(不具合) / question(質問) に Label を付けて種類分けして使う。
        Pull Request や コミットと関連付けることができるので、課題に対する一覧の流れを追えるようになっている。

【  Pull Request  】.... 地理的に離れたところから、改善案を手軽に提案できる機能。( オンライン )

    プロジェクトに対しての修正点を取り込んでもらいたい場合、
    "こんな感じで修正してみたんですけど、どうですか？" "問題なかったらマージしてください" という機能。
    コメントでやりとりする。
    この Pull Request 機能を使うことで、Web画面のボタンを１クリックするだけで、
    取り込んでもらうようにリクエストを送ることができるようになる。
    Web上の１画面で管理できるので、場所や時間を問わず、誰でも参加でき、
    わざわざ会議をしなくても、複数人での相互レビューを簡単に行なうことが可能。

【  修正方法  】

    まず、サーバーから、リポジトリを取得してくること。


【  GitHub には、SNS機能がある  】

    Contribute     .... 緑の色が濃いほど、貢献度が高い。
    follow / watch .... follow や watch の設定をすることで、個人やプロジェクトの活動情報を
                        自動的に受け取ることができる。
    アクティビティ    .... 個人やプロジェクトの活動内容が一覧できる。

【  wiki / GitHub Pages  】.... 静的な Webページ を作ることができる機能。

    GitHub には、情報を公開し共有するために、wiki と GitHub Pages が用意されている。
      ・CSS も自由に適用できる。( デザインの変更が自由自在 )
      ・独自ドメインも適用できる。
      ・GitHub Flavored Markdown 形式で、記述する。( テキスト作成感覚 )
      ・Automatic Page Generator 機能 ( テンプレートを選ぶ機能 )
      ・Jekyll ( ブログのようなサイトを作ることができる )

    簡単に見出しやリストを作ることができる。

    GitHub Pages .... HTML / CSS / JavaScript / 画像でWebページを作成できる。

[ 二つのアカウント ]

    User         アカウント : 個人のアカウント
    Organization アカウント : 複数人で使うアカウント

[ GitHub(Web)上でリポジトリの作成]

    1. GitHub に Login
    2. '+' をクリックする。
    3. New repository をクリックする。
    4. Repository name / Description を入力する。
    5. Public を選択する。
    6. Initialize this repository with a README にチェックを入れる。
    7. Create repository をクリックする。

[ SSH Key の設定 ]

    GitHubの教科書 P72〜75 の通りにすること。

[ clone の 作成方法 ] .... SourceTree で。

    GitHubの教科書 P75〜76 の通りにすること。

[ ３段階のファイル状態 ]

    作業ディレクトリ     : 追加/変更中のファイル群。 (今回は、/Users/sugino/PythonTest01 )
      ( インデックスする : "git add file名" )
    ステージングエリア   : 追加/変更したものを、一度一時的に、まとめておくエリア。
      ( コミットする    : "git commit" )
    Gitディレクトリ     : 追加/変更が確定したファイル群。

    尚、ファイルがどのエリアに属しているかを見るには、"git status" で確認できる。

[  Parent  ]

    追加/変更前(元)のリポジトリのこと。( 割り当てられたID#を使って、過去のリポジトリまでさかのぼることができる )

[  README.md  ]

    そのプロジェクトの説明や使い方を書いておくファイル。( トップページに表示される )
